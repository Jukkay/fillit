/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   hmain.test                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: htahvana <htahvana@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/12/13 12:48:29 by htahvana          #+#    #+#             */
/*   Updated: 2021/12/20 12:32:03 by htahvana         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../fillit.h"

int	main(int argc, char **argv)
{
	//int i = 0;
	(void)argc;
	(void)argv;
	unsigned short a;
	unsigned short b;
//".....##..##....."
//"......##.##....."
	a = savetoshort("################");
	print_bits(a, 15);
	ft_putendl("==========");
	b = savetoshort("#.#..#.##.#..#.#.");
	print_bits(b, 15);
		ft_putendl("==========");
	print_bits(sbshort(a,1,1), 15);
		ft_putendl("==========");
	print_bits(sbshort(b,1,1), 15);

/* 	t_tetris	arr[27];
	t_tetris	*ptr;
	
	ptr = arr;
	ft_read_file(argc, argv, ptr);
	while(ptr[i].shape > 0)
	{
		print_bits(sblong(ptr[i].shape,-1,-1),63);
		print_bits(sbshort(ptr[i].shape,-1,-1),15);
		ft_putendl("--------------");
		i++;
	} */

	/* t_tetris arr[3];
	t_tetris *alltetri;
	alltetri = arr;

	alltetri[0].pos = ft_newpoint(0,0);
	alltetri[0].size = ft_newpoint(3, 2);
	alltetri[0].shape = a;

	alltetri[1].pos = ft_newpoint(3, 2);
	alltetri[1].size = ft_newpoint(2, 2);
	alltetri[1].shape = b;
	
	//ft_putnbr(collisioncheck(1, &alltetri, 4));
	//alltetri[2] = NULL;

	//ft_putnbr(collisioncheck(1, &alltetri, 12));
	ft_putendl("vvvvvvvv");
	printstructs(&alltetri);
	ft_putnbr(collisioncheck(1,&alltetri,6));
	ft_putendl("");
	ft_putnbr(collisioncheck(0,&alltetri,6));

	ft_putendl("");
	printstructs(&alltetri);

	i = validgrid("......#.###.....");
	ft_putendl(""); 
	//ft_putnbr(i); */
}